\documentclass[a4paper, 10pt]{article}

\usepackage{imakeidx}

<<optionsChunks, echo = FALSE, cache = FALSE, message = FALSE, warning = FALSE>>=

	library(knitr)
	
	outputDirFig <- file.path(inputParameters$outputDir, "figures")
	if(!dir.exists(outputDirFig))	dir.create(outputDirFig, recursive = TRUE)
	
	knitr::opts_chunk$set(
		echo = FALSE, 
		message = FALSE,
		cache = FALSE,
		warning = FALSE,
		error = FALSE, # stop-on-error
		results = "asis",
		fig.align = "center",
		fig.path = outputDirFig
	)
	
	options(warn = 1, width = 200)
	
@

<<indexCustom-makeIndex>>=

	if(!is.null(inputParameters$index$indexMake))
		cat(inputParameters$index$indexMake)

@

\makeindex

% decrease margins: 1.875 inches wide by default on 10pt
<<setMarginsAndLayout>>=
	cat(paste0("\\usepackage[",
		if(inputParameters$formatReport$landscape)	"landscape,",
		"margin=", inputParameters$formatReport$margin, "in",
		"]{geometry}\n")
	)
@

% make clickeable table of contents
\usepackage{hyperref}
\hypersetup{
    colorlinks,
    citecolor = black,
    filecolor = black,
    linkcolor = black,
    urlcolor = black
}

\begin{document}

%\tableofcontents

\section{Subject}

<<includePlots>>=

	listPlotsPerSubjectList <- inputParameters$listPlotsPerSubject
	
	# convert list of list to list with only one level
	listPlotsPerSubject <- unlist(listPlotsPerSubjectList, recursive = FALSE)
	
	# extract height for each plot
	figHeightInches <- sapply(listPlotsPerSubject, function(plotSubject)
		# number of lines in plot panel
		attr(plotSubject, "nLinesPlot") * inputParameters$formatReport$heightLineIn
	)
	
	# extract labels 
	# remove space and file separator character(s) if present
	labelPlots <- gsub(paste0(.Platform$file.sep, "| "), "-", names(listPlotsPerSubject))
	
	# extract titles
	sectionTitles <- unlist(lapply(names(listPlotsPerSubjectList), function(subject) 
		c(subject, rep("", length(listPlotsPerSubjectList[[subject]])-1))))

	# extract titles
	bookmarkInfos <- if(!is.null(inputParameters$index))
		unlist(lapply(names(listPlotsPerSubjectList), function(subject) 
			c(inputParameters$index$indexEntry[subject], rep("", length(listPlotsPerSubjectList[[subject]])-1))))
		
#	textHeightPt <- ifelse(landscape, 345, 598)
	textWidthInches <- getWidthPlot(
		margin = inputParameters$formatReport$margin,
		landscape = inputParameters$formatReport$landscape,
		aspectRatio = inputParameters$formatReport$aspectRatio
	)
	# option 1:
#	system.time(knitPrintListPlotsKnitr(
#		plotsList = listPlotsPerSubject,
#		out.width = "'\\\\textwidth'",
#		fig.height = figHeightInches,
#		fig.width = textWidthInches,
#		sectionTitles = sectionTitles,
#		labels = labelPlots,
#		bookmarkInfos = bookmarkInfos
#	))
	
	# option 2:
	fileNames <- file.path(outputDirFig, paste0(labelPlots, ".pdf"))
	
	if(inputParameters$shiny)	requireNamespace("shiny")
	
	# create the plots
	begin <- Sys.time()
	tmp <- sapply(seq_along(listPlotsPerSubject), function(i){
		if(inputParameters$shiny)	incProgress(detail = paste("Export profile:", names(listPlotsPerSubject)[i]))
		pdf(fileNames[i], width = textWidthInches, height = figHeightInches[i])
#		png(
#			fileNames[i], 
#			width = textWidthInches, height = figHeightInches[i],
#			units = "in",
#			res = 300
#		)
		print(listPlotsPerSubject[[i]])
		tmp <- dev.off()
	})
	end <- Sys.time()
	end-begin
	
	# include the graphics in the report
	tmp <- sapply(seq_along(listPlotsPerSubject), function(i){
				
		# section title
		if(sectionTitles[i] != "")
			cat("\\subsection{", sectionTitles[i], "}", 
			if(!is.null(bookmarkInfos) && bookmarkInfos[i] != "")	bookmarkInfos[i],
			"\n", sep = ""
		)
		cat("\\includegraphics[width=\\textwidth]{", fileNames[i], "}\n", sep = "")
		cat('\\newpage\n')
			
	})

@



% add table of contents in 'Index'
%\cleardoublepage
%\phantomsection
%\addcontentsline{toc}{chapter}{\indexname}

<<indexCustom-printIndex>>=

	if(!is.null(inputParameters$index$indexPrint)) {
		cat("\\section{Index}\n")
		cat(inputParameters$index$indexPrint)
	}

@

\printindex

\newpage

\section{Appendix}

\subsection{Session information}

This report was \Sexpr{ifelse(inputParameters$shiny, "automatically generated by a Shiny application", "generated")}
the: \Sexpr{format(Sys.time(), format = "%Y-%m-%d at %H:%M:%S")}.

<<sessionInfo>>=

	sessionInfoTex <- toLatex(sessionInfo())
	# highlight versions of patientProfilesVis and patientProfilesVisShiny packages
	sessionInfoTex <- gsub("(patientProfilesVis[Shiny]*~[^,]*)", "\\\\textbf{\\1}", sessionInfoTex)
	sessionInfoTex <- gsub("(glpgUtilityFct~[^,]*)", "\\\\textbf{\\1}", sessionInfoTex)
	
	print(sessionInfoTex)
	
@

\end{document}